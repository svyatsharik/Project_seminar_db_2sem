image: python:3.9-slim

# Порядок запуска пайплайна
workflow:
  rules:
    # При загрузке изменений в репозиторий пайплайн автоматически запускается
    - when: always

# Стейджи пайплайна
stages:
  - tasks

# Внутри пайплайна автоматически поднимается
# пустая база Postgres (каждый раз на новый степ)
services:
  - name: postgres:15-alpine
    alias: postgres

variables:
  #  Переменные окружения для Postgres
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password
  POSTGRES_HOST_AUTH_METHOD: trust

  #  Переменные окружения для вспомогательного
  #  скрипта utils/pypsql.py и тестов
  DBNAME: postgres
  DBHOST: postgres
  DBPORT: 5432
  DBUSER: postgres
  DBPASSWORD: password

  #  Аккуратное формирование всяких абсолютных
  #  путей к файлам и директориям
  #  у вас будет ${PROJECT_DIR} тождественно равен ${CI_PROJECT_DIR}
  PROJECT_DIR: ${CI_PROJECT_DIR}
  SCRIPTS_DIR: ${PROJECT_DIR}/scripts
  UTILS_DIR: ${PROJECT_DIR}/utils
  PYPSQL: ${UTILS_DIR}/pypsql.py

  #  Переменные для цвета в консоли (можете
  #  использовать какие-то другие свои)
  NO_COLOUR: '\033[0m'
  LIGHT_RED: '\033[1;31m'

# Установка обозначенных requirements, чтобы работали скрипты по работе с бд
.setup:
  before_script:
    - pip install -r ${PROJECT_DIR}/requirements.txt > /dev/null 2> /dev/null

ddl scripts:
  stage: tasks
  extends:
    - .setup
  # Ниже описываем, в каком порядке и какие команды запускаем.
  script:
    # Выводим в консоль название шага – Task 3. DDL queries
    - echo -e "${LIGHT_RED}>>> Task 3. DDL queries <<<${NO_COLOUR}"
    # Запускаем скрипты по созданию таблиц и заполнению их данными.
    # Флаг `--cat` отвечает за вывод запускаемого скрипта в консоль пайплайна
    - python3 ${PYPSQL} --file="${SCRIPTS_DIR}/create_scripts.sql" --cat
    - python3 ${PYPSQL} --file="${SCRIPTS_DIR}/insert_scripts.sql" --cat
    - echo "Table 'guitar_shop_database.maker' sample:"
    # Демонстрируем, что вставка прошла успешно. Флаг `--verbose` отвечает
    # за вывод в консоль результата запуска скрипта
    - python3 ${PYPSQL} --sql="SELECT * FROM guitar_shop_database.maker LIMIT 3"
      --verbose
    - echo "Table 'guitar_shop_database.supply' sample:"
    - python3 ${PYPSQL} --sql="SELECT * FROM guitar_shop_database.supply LIMIT
      3" --verbose
    - echo "Table 'guitar_shop_database.product' sample:"
    - python3 ${PYPSQL} --sql="SELECT * FROM guitar_shop_database.product LIMIT
      3" --verbose
    - echo "Table 'guitar_shop_database.product_x_supply' sample:"
    - python3 ${PYPSQL} --sql="SELECT * FROM
      guitar_shop_database.product_x_supply LIMIT 3" --verbose
    - echo "Table 'guitar_shop_database.characteristic' sample:"
    - python3 ${PYPSQL} --sql="SELECT * FROM guitar_shop_database.characteristic
      LIMIT 3" --verbose
    - echo "Table 'guitar_shop_database.product' sample:"
    - python3 ${PYPSQL} --sql="SELECT * FROM guitar_shop_database.product LIMIT
      3" --verbose
